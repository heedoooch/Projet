import produce, { enableES5, setAutoFreeze } from 'immer';
import { REGISTER_HOST_ACTION, DEREGISTER_HOST_ACTION, ADD_PORTAL_ACTION, REMOVE_PORTAL_ACTION, UPDATE_PORTAL_ACTION } from './constants';
enableES5();
setAutoFreeze(false);

const registerHost = (draft, hostName) => {
  if (!(hostName in draft)) {
    draft[hostName] = [];
  }
};

const deregisterHost = (draft, hostName) => {
  delete draft[hostName];
};

const addPortal = (draft, hostName, portalName, node) => {
  if (!(hostName in draft)) {
    registerHost(draft, hostName);
  }
  /**
   * updated portal, if it was already added.
   */


  const index = draft[hostName].findIndex(item => item.name === portalName);

  if (index !== -1) {
    draft[hostName][index].node = node;
  } else {
    draft[hostName].push({
      name: portalName,
      node
    });
  }
};

const updatePortal = (draft, hostName, portalName, node) => {
  if (!(hostName in draft)) {
    if (__DEV__) {
      console.error("Failed to update portal '".concat(portalName, "', '").concat(hostName, "' was not registered!"));
    }

    return;
  }

  const index = draft[hostName].findIndex(item => item.name === portalName);

  if (index !== -1) {
    draft[hostName][index].node = node;
  }
};

const removePortal = (draft, hostName, portalName) => {
  if (!(hostName in draft)) {
    if (__DEV__) {
      console.error("Failed to remove portal '".concat(portalName, "', '").concat(hostName, "' was not registered!"));
    }

    return;
  }

  const index = draft[hostName].findIndex(item => item.name === portalName);
  if (index !== -1) draft[hostName].splice(index, 1);
};

export const reducer = produce((draft, action) => {
  const {
    type
  } = action;

  switch (type) {
    case REGISTER_HOST_ACTION:
      registerHost(draft, action.hostName);
      break;

    case DEREGISTER_HOST_ACTION:
      deregisterHost(draft, action.hostName);
      break;

    case ADD_PORTAL_ACTION:
      addPortal(draft, action.hostName, action.portalName, action.node);
      break;

    case UPDATE_PORTAL_ACTION:
      updatePortal(draft, action.hostName, action.portalName, action.node);
      break;

    case REMOVE_PORTAL_ACTION:
      removePortal(draft, action.hostName, action.portalName);
      break;
  }

  return draft;
});
//# sourceMappingURL=reducer.js.map